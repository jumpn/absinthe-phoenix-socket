# <%= name %>

> <%= description %>

<!-- START doctoc -->
<!-- END doctoc -->

## Features

- Immutable functional API
> All received and returned objects with the exception of AbsintheSocket
  instances (there are plans to make this immutable too) are treated in an
  immutable way. Objects have no methods and instead we provide independant
  stateless functions to interact with them.
- Lazy connect / join
> If provided phoenix socket instance is not connected, then instead of
  connecting at creation time, connection will be established on the next
  invocation of [send](#send).
- Reconnect channel on connection lost
> Phoenix socket reconnects on connection lost but it doesn't rejoin to the
  channel automatically, we do.
- Handle pending operations on connection lost
> Pending mutations will be aborted, queries will be resent, and subscriptions
  reestablished.
- Observer support of recoverable errors
> Since connection lost is handled, then two events needs to exist to represent
  this fact: Error (recoverable), Abort (unrecoverable).
- Multiple observers per request
> Calling [send](#send) returns a notifier which allows attaching any number of
  observers that will be notified when result arrives.

## Installation

### Using [npm](https://docs.npmjs.com/cli/npm)

```
$ npm install --save <%= name %>
```

### Using [yarn](https://yarnpkg.com)

```
$ yarn add <%= name %>
```

## Types

```flowtype
type Event = "Abort" | "Error" | "Start" | "Stop" | "Value";

type Observer<Value> = {
  onAbort: (error: Error) => any,
  onError: (error: Error) => any,
  onStart: () => any,
  onValue: (value: Value) => any
};

type Notifier<Result> = {
  observers: Array<Observer<Result>>,
  operationType: GqlOperationType,
  request: GqlRequest<*>,
  subscriptionId?: string
};

type AbsintheSocket = {
  channel: Channel,
  isJoining: boolean,
  notifiers: Array<Notifier<any>>,
  phoenixSocket: PhoenixSocket
};
```

## API

## License

[<%= license %>](LICENSE.txt) :copyright: **Jumpn Limited** / <%= author.name %> (<%= author.email %>)
